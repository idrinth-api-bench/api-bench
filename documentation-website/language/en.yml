nav:
  home: "Home"
  imprint: "Imprint"
  sponsors: "Sponsors"
  contributors: "Contributors"
  support: "Support"
  contributing: "Contributing"
  license: "License"
  autowiring: "Autowiring"
  middlewares: "Middlewares"
  results: "Results"
  usage: "Usage"
  logging: "Logging"
  storage: "Storage"
  routes: "Routes"
  quick-start: "Quick Start"
home:
  meta:
    title: "Home"
    description: "Welcome to the documentation for the framework @idrinth/api-bench"
  title: "What does this project do?"
  faq:
    title: "Frequently Asked Questions"
    questions:
      title_1: "What is benchmarking?"
      description_1: "Benchmarking is the process of measuring software performance against established best practices."
      title_2: "What is load testing?"
      description_2: "Load testing evaluates system behavior under peak or anticipated load conditions."
      title_3: "How long does it take to write a test?"
      description_3: "The average time to write a test is 2-3 minutes. For beginners, it is about 15 minutes."
      title_4: "How long does it take to setup?"
      description_4: "By following the Quick Start, it only takes a few minutes!"

imprint:
  meta:
    title: "Imprint"
    description: "Imprint and privacy statements for this website"

sponsors:
  meta:
    title: "Sponsors | Contributing"
    description: "The following businesses and companies are sponsoring the development of api-bench by providing time, money or necessary tools."
  title: "Sponsors"
  description: "The following businesses and companies support the development of @idrinth/api-bench. This means they provide time, money or necessary tools for the development."
  bjoernbuettner:
    intro: "Björn Büttner is a Germany based business, that provides custom development and hosting services in a web context. Additionally to that some training and consulting are offered, that do include this project for performance monitoring."
    sponsoring: "The business supports the project by hosting this documentation site for free and supplying the domain."
  jungwild:
    intro: "jungwild is a Germany based recruiting agency, that uses the framework for testing their own apis."
    sponsoring: "The agency provides some time for testing and developing changes of the framework before release."

contributors:
  meta:
    title: "Contributors | Contributing"
    description: "These are the people who made the site and framework what they are today."
  title: "Contributors"
  description: "A big thank you to everyone who contributed. Below are the ones who contributed code, but other contributions are as valuable."
  code_contributors: "Code Contributors"
  none_code_contributors: "None Code Contributors"

support:
  meta:
    title: "Support"
    description: "Support options for the @idrinth/api-bench framework."
  title: "Support"
  description: "No matter who you are, you can get support via github issues and discussions. Support reaction times depend on the availability of volunteers, so it may take a day or two."
  commercial:
    title: "Commercial support"
    description: "If your closed source software needs support, that can't be handled via the above means, Björn Büttner also provides payed support on a business basis. You can reach the business via:"
  training:
    title: "Professional Training"
    description: "Training is provided by Björn Büttner on a business basis for organisations. For pricing and scheduling contact the business at:"

404:
  meta:
    title: "404 NOT FOUND"
    description: "The page you desired has not been found"
  title: "404 Not Found"
  description: "Sadly the URL you entered couldn't be found."

contributing:
  meta:
    title: "Contributing"
    description: "Contribution guidelines for the framework @idrinth/api-bench"
  title: "Contributing Guidelines"
  description: "Any and all contributions are encouraged."
  structure:
    title: "Structure"
    description: "The project is a mono-repo grouped into multiple subprojects, for example website, framework, history-microservice and history-website. You can find more detailed instructions for the specific part in the corresponding folder's readme."
  issues:
    title: "Issues"
    description: "Any idea and bug report is considered a contribution. Not only do they help improving the code base, they help other people to get more use out of this framework. Please try to stick to the format of predefined issue types to make it easier to filter and handle for anyone interested in the topic."
  code:
    title: "Code"
    style: "The style guidelines are provided via eslint. Please try to optimise code for readability, since code will be read way more often than it will be changed."
    breaking: "While adding functionality, keep in mind to break existing interfaces, entry points and functionality only if absolutely necessary."
    workflow:
      title: "Contribution workflow"
      list_item_1: "fork the repository"
      list_item_2: "create a feature branch (issue-xxx-does-something) from master"
      list_item_3: "create a draft pull request"
      list_item_4: "mention fixes #xxx in the description"
      list_item_5: "make your changes to the branch"
      list_item_6: "check if actions are all green"
      list_item_7: "mark as ready to review"
      list_item_8: "get changes reviewed"
      list_item_9: "if review is positive get changes merged otherwise fix and send back to review"
    tests:
      title: "Tests"
      description: "Testing new code is expected and adding tests or improving tests for old code is appreciated. The goal is to find most issues by either static analysis or unit and integration tests."
      manual:
        title: "Manual Tests"
        description: "For manual testing you can run 'npm run coai' in the source folder to automatically check out and install all required files for testing."
    naming:
      title: "Naming conventions"
      list_item_1: "camelCase for variables and functions"
      list_item_2: "UPPER_SNAKE_CASE for constants"
      list_item_3: "PascalCase for interfaces and classes"
      list_item_4: "kebab-case for file names"
    requirements:
      title: "Requirements"
      node: "One of the last two node versions"
      os: "OS: Linux / Windows / Mac"
    setup:
      title: "Setup"
      description: "Run the following commands to create the full project:"
    commits:
      title: "Commit Message Guidelines"
      preface: "*This specification is inspired by Angular commit messages guidelines."
      introduction: "These are the rules for how Git commit messages for api-bench should be formatted. This format leads to easier to read commit history."
      parts: "Each commit message consists of a header, a body, and a footer."
      header:
        title: "Commit Message Header"
        format: "Headers must adhere to the following format:"
        description: "The header is mandatory and should conform to the Commit Message Header format."
        type:
          title: "Type"
          description: "The list of supported types:"
          list_item_1: "build: Changes that affect the build system or external dependencies"
          list_item_2: "ci: Changes to CI configuration files and scripts"
          list_item_3: "docs: Documentation changes"
          list_item_4: "feature: A new feature"
          list_item_5: "fix: A bug fix"
          list_item_6: "perf: A code change that improves performance"
          list_item_7: "refactor: A code change that neither fixes a bug nor adds a feature"
          list_item_8: "test: Adding missing tests or correcting existing tests"
        scope:
          title: "Scope"
          description: "The scope should be the name of the affected part of the project. The list of supported scopes:"
          list_item_1: "framework"
          list_item_2: "website"
          list_item_3: "history-microservice"
          list_item_4: "history-website"
        summary:
          title: "Summary"
          description: "The summary field should provide a succinct description of the change."
          list_item_1: "use the imperative, present tense"
          list_item_2: "don't capitalize the first letter"
          list_item_3: "no dot (.) at the end"
      body:
        title: "Commit Message Body"
        description: "The body is mandatory for all commits except for those of type 'docs' or in cases when it' clear from the header summary. They should conform to the Commit Message Body format."
        time: "Just as in the summary, use the imperative, present tense."
        content: "The commit message body should explain why you are making the change. You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change."
      footer:
        title: "Commit Message Footer"
        description: "The footer is optional. The Commit Message Footer format describes what the footer is used for and the structure it must have."
        content: "The footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues and other PRs that this commit closes or is related to."
        breaking: "In case of breaking changes and deprecations the section should start with the phrase 'BREAKING CHANGE:' or 'DEPRECATED: ' respectively followed by a description. For example:"
      complete:
        title: "Complete Commit"
        description: "Here' a complete example of a correct commit message:"
      reverts:
        title: "Revert commits"
        description: "If the commit reverts a previous commit, it should begin with 'revert:', followed by the header of the reverted commit."
        content: "The content of the commit message body should contain:"
        list_item_1: "information about the SHA of the commit being reverted in the following format: 'This reverts commit <SHA>'"
        list_item_2: "a clear description of the reason for reverting the commit message."
    pull_requests:
      title: "Pull Requests"
      description: "Please open your pull requests in draft mode. When ready to review remove the draft. Do not force-push, it just creates additional work."
  documentation:
    title: "Documentation"
    description: "Documentation is an underrated part of every software. Adding any kind of clarification, example or improvement is highlyappreciated and encouraged. The ones writing the documentation are the unsung heroes of open and closed source software."
  examples:
    title: "Examples"
    description: "For examples please keep in mind, that we don&apos;t want to overload any api. Don't use high load tasks, don't use apis that are not for public use. It is expected that examples will be run and they must not damage anyone, including third parties."
license:
  meta:
    title: "License"
    description: "The framework @idrinth/api-bench is available under the MIT license"

autowiring:
  meta:
    title: "Autowiring | Usage"
    description: "The framework @idrinth/api-bench can autowire environment variables into route definitions"

middlewares:
  meta:
    title: "Middlewares | Usage"
    description: "The framework @idrinth/api-bench provides default middlewares and allows for custom middlewares"

results:
  meta:
    title: "Results | Usage"
    description: "The framework @idrinth/api-bench provides default result handlers and allows for additional custom result handlers"

usage:
  meta:
    title: "Usage"
    description: "Basic usage information for the framework @idrinth/api-bench"
  programmatically:
    description: "Basically require main/include main and supply the executor method with required parameters. Tasks defined in src/routes-subfolders before, before_task, before_each, main, after_each, after_task, and after will be used to automatically fill the Job processed by the executor. Automatic filling only happens when there are no tasks provided to the function."

logging:
  meta:
    title: "Logging | Usage"
    description: "Information about logging usage and support of the framework @idrinth/api-bench"
  used:
    description: "Most log entries are debug level, with the major steps being written to info. Trace is currently not used but may be used for detailed argument printing at some point."
  custom:
    final: "For ease of use, a wrapper is provided as well, that only requires a log method to be implemented."

storage:
  meta:
    title: "Storage | Usage"
    description: "Information about the provided mysql storage and how to create custom storage implementations for @idrinth/api-bench"
  description: "Storage classes store each finished set of the run. By default, nothing is stored, but a mysql storage is provided for those wanting it."
  custom:
    description: "To provide a custom storage, implement the interface below. The method will be called once per task."

routes:
  meta:
    title: "Routes | Usage"
    description: "Information about how to create test route definitions with the framework @idrinth/api-bench"
  title: "Routes"
  description: "Routes are build as configuration objects, that must be default-exported or provided via module.exports and be in a javascript file. The object is wrapped in a function to allow environment injection, see below for an example."
  example:
    title: "Example"
    description: "The code below defines a request to a URL from the environment with GET."
    middleware: "To apply middlewares add both the pre and post properties as shown in the example. Then proceed to pass in your middleware functions to be executed."

quick-start:
  meta:
    title: "Quick Start"
    description: "A few steps to quickly get an api-bench project up and running."
  title: "@idrinth/api-bench quick start"
  description: "Starting out with the framework is not difficult. Follow the next couple steps and you will have your first case ready to run in a few minutes."
  step1:
    title: "Requirements"
    description: "Make sure that nodejs in a supported version is installed. That means one of the latest two versions. The latest long term support(lts) version is always recommended."
  step2:
    title: "Setup"
    description: "Run the creation command to create a new benchmark project in a folder within your current working directory:"
  step3:
    title: "Case creation"
    description: "Go into the newly created project and create a new file at src/routes/main/first-test.ts. Fill it with the following example content:"
  step4:
    title: "First run"
    description: "With the following command you can run the example against a public test api to see it in action. Please don't try to create a service denial scenario and keep the thread count low."

loader:
  wait: "Trying to load fresh content for you, please wait."
  offline: "Please go online and then refresh the page."
  reload: "Content has changed, reloading the page for you in a moment."
